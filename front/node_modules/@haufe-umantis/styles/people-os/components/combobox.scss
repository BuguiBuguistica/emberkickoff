/**
 * Combobox:
 * A composite component containing a single-line textbox and another element, such as a listbox or grid, that can dynamically pop up to help the user set the value of the textbox.
 *
 *     @example
 *     <umantis-combobox><div aria-label="Tag" role="combobox" aria-expanded="true" aria-owns="owned_listbox" aria-haspopup="listbox"><input type="text" placeholder="Search" aria-autocomplete="list" aria-controls="owned_listbox" aria-activedescendant="selected_option"></div><ul role="listbox" tabindex="-1" aria-activedescendant="selected_option"><li role="option"><span>Option 1</span></li><li id="selected_option" role="option"><span>Option 2</span></li><li role="option"><span>Option 3</span></li></ul></umantis-combobox>
 */
@import '../utils/mixins/shapes';

umantis-combobox {
  display: inline-block;
  &, * {
    @extend %baseFont;
  }
  // searchbox
  > *[role="combobox"]{
    display: flex;
    input{
      @extend %formElement;
    }
  }
  > input {

    &::after {
      @include arrow();
      right: ($spacer * 5);
      top: ($spacer * 6 - 1);
    }
  }
  // the list of items
  > *[role="listbox"] {
    @extend %dropdown;
    margin-top: -1px;
    > li {
      @extend %dropdownItem;
    }
  }
  ul[role="listbox"] {
    display: none;
  }
  > *[role="combobox"][aria-expanded="true"] + ul[role="listbox"] {
    display: block;
  }
}

// WAI-ARIA specification and examples
// https://www.w3.org/TR/wai-aria-1.1/#combobox
// https://www.w3.org/TR/2017/NOTE-wai-aria-practices-1.1-20171214/examples/combobox/aria1.0pattern/combobox-autocomplete-list.html

